# Функции
# Функции – это многократно используемые фрагменты программы. 
# Они позволяют дать имя определенному блоку команд для того, 
# чтобы выполнять этот блок по указанному имени в любом месте программы и сколь угодно много раз. 
# Это называется вызовом функции. Мы уже использовали встроенные функции: print, input, len, range;

# Функции могут принимать параметры, т.е. некоторые значения, 
# передаваемые функции для того, чтобы она что-либо сделала с ними.

# Параметры указываются в скобках при объявлении функции и разделяются запятыми. 
# Аналогично мы передаём значения, когда вызываем функцию. 
# Обратите внимание на терминологию: имена, указанные в объявлении функции, 
# называются параметрами, тогда как значения, 
# которые вы передаёте в функцию при её вызове, – аргументами.

# Пример:



def print_max(a, b):
    if a > b:
        print(a, 'максимально')
    elif a == b:
        print(a, 'равно', b)
    else:
        print(b, 'максимально')

print_max(3, 4)  # прямая передача значений

x = 5
y = 7

print_max(x, y)  # передача переменных в качестве аргументов


# # # Локальные переменные

# При объявлении переменных внутри определения функции, они никоим образом не связаны с другими 
# переменными с таким же именем за пределами функции – т.е. имена переменных 
# являются локальными в функции. 
# Это называется областью видимости переменной. Область видимости всех переменных ограничена блоком, 
# в котором они объявлены, начиная с точки объявления имени.

x = 50

def func(x):
    print('x равен', x)
    x = 2
    print('Замена локального x на', x)

func(x)
print('x по-прежнему', x)


# # # Оператор return
# Оператор return используется для возврата из функции, т.е. для прекращения её работы 
# и выхода из неё. 
# При этом можно также вернуть некоторое значение из функции:

def maximum(x, y):
    if x > y:
        return x
    elif x == y:
        return 'Числа равны.'
    else:
        return y

print(maximum(2, 3))
# Из функции можно вернуть только одно значение. Если все-таки необходимо вернуть несколько значений, 
# то для этого можно использовать кортеж:

def div_mod(a, b):
    return a // b, a % b

r1 = div_mod(11, 2)  # r1 - кортеж (5, 1)
d, m = div_mod(11, 2)  # деструктурирование кортежа